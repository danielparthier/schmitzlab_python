---
title: "Introduction to Python\nDay 2"
author: "Verjinia Metodieva and Daniel Parthier"
date: 2025-02-04
format:
    revealjs:
        incremental: true 
        highlight-style: oblivion
        theme: night
        drop:
            engine: pyodide
        mermaid: 
          theme: dark
        margin: 0.01
        embed-resources: true
    pdf:
        mermaid: 
          theme: neutral
        highlight-style: github
execute:
    eval: true
    echo: true
ipynb-shell-interactivity: all
revealjs-plugins:
  - drop
---

# Jupyter Notebook


# Recap homework

Let's take a look at the homework

# Functions part 2

# Goal of today

<small>

```{.python}
# TODO: add useful example to introduce class
# Some function we have to decide
def useful_function(par1, par2, par3):
    # some loop
    for i in par1:
        if par1 == "something":
            # do something
        else:
            pass # or something else
    return None # or an object 
```
</small>

::: {.notes}
_ _ _ _ _ _ _
This is an example to showcase what we will achieve today.
:::


## Global vs. Local

<!--some high contrast colour choices : #DEC62F, #DE2F99, #2FD2DE,  #696969 (DimGrey), #6a9956 (comment green), #ce9178 (doc string red)-->


...

### Short interlude

::: {style="font-size: 80%;"}

::: {.fragment .nonincremental}
- Whole numbers: Integers `int`

``` {python}
#| code-line-numbers: false
type(1)
```
:::

::: {.fragment .nonincremental}
- Real numbers: Floats `float`

``` {python}
#| code-line-numbers: false
type(1.0)
```
:::

::: {.fragment .nonincremental}
- Most of the time it might not matter^[In python]

``` {python}
#| code-line-numbers: false
1 == 1.0
```
:::

- Sometimes there is a difference and we will see later why

:::

::: {.notes}
Most of the time python handles the integer vs. float automatically. You will not have to worry about assigning. 
:::

...

## Conditional statements

The important question of what to do "if" something happens.

- Programming languages are languages
- `if` something is `True` you should do `something`, `else` do `something else`

...

### How to check if everything is true?


...

## For loops

### Enumerate


...

### Range


...

### List comprehension


...

### Compare different functions


...

## While loops

- Perform a task `while` something is `True`
- Be careful:
    - Some loops never finish (get stuck)
    - Make sure that condition for ending the loop can be fullfilled

``` {.python}
while check_condition:
    perform_task()

```

# Errors and how to read them

## Types of errors

## Fix errors