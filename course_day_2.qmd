---
title: "Introduction to Python\nDay 2"
author: "Verjinia Metodieva and Daniel Parthier"
date: 2025-02-04
format:
    revealjs:
        incremental: true 
        highlight-style: oblivion
        theme: night
        drop:
            engine: pyodide
        mermaid: 
          theme: dark
        margin: 0.01
        embed-resources: true
    pdf:
        mermaid: 
          theme: neutral
        highlight-style: github
execute:
    eval: true
    echo: true
ipynb-shell-interactivity: all
revealjs-plugins:
  - drop
---

# Jupyter Notebook


# Recap homework

Let's take a look at the homework

# Functions part 2

# Goal of today

<small>

```{.python}
# TODO: add useful example to introduce class
# Some function we have to decide
def useful_function(par1, par2, par3):
    # some loop
    for i in par1:
        if par1 == "something":
            # do something
        else:
            pass # or something else
    return None # or an object 
```
</small>

::: {.notes}
_ _ _ _ _ _ _
This is an example to showcase what we will achieve today.
:::


## Global vs. Local

<!--some high contrast colour choices : #DEC62F, #DE2F99, #2FD2DE,  #696969 (DimGrey), #6a9956 (comment green), #ce9178 (doc string red)-->


# Short interlude

::: {style="font-size: 80%;"}

::: {.fragment .nonincremental}
- Whole numbers: Integers `int`

``` {python}
#| code-line-numbers: false
type(1)
```
:::

::: {.fragment .nonincremental}
- Real numbers: Floats `float`

``` {python}
#| code-line-numbers: false
type(1.0)
```
:::

::: {.fragment .nonincremental}
- Most of the time it might not matter^[In python]

``` {python}
#| code-line-numbers: false
1 == 1.0
```
:::

- Sometimes there is a difference and we will see later why

:::

::: {.notes}
Most of the time python handles the integer vs. float automatically. You will not have to worry about assigning. 
:::

# Conditional statements

The important question of what to do "if" something happens.

- Programming languages are languages
- `if` something is `True`
    - you should do `something`
- `else`
    - do `something else`

::: {.fragment}
```{.python}
if statement:
    print("the statement is true")
else:
    print("the statement is false")
```
:::

::: {.notes}
This structure is the simplest of conditionals. The statement has to be `True` to enter the `if` part to execute. Should the statement by `False` it will skip and enter the `else` part which will then be executed.
:::

## Multiple if-statements

```{python}
#| code-annotations: true
#| eval: false
value = 3
if value == 1: # <1>
    print("the value is 2")
elif value == 2: # <2>
    print("the value is 2")
elif value == 3: # <3>
    print("the value is 3") # <4>
else:
    print("the value is something else")
```

1. Check if `value` is `1`
2. Check if `value` is `2`
3. Check if `value` is `3`
4. Execute block

::: {.fragment}
```{python}
#| echo: false
value = 3
if value == 1:
    print("the value is 2")
elif value == 2:
    print("the value is 2")
elif value == 3:
    print("the value is 3")
else:
    print("the value is something else")
```
:::

::: {.notes}
Statements will be checked sequentially. Should one statement be `True` the corresponding part of the `if`/`elif` block will be executed. All other blocks after that will be skipped. This means one `True` expression is enough. 
:::

## How to check if everything is true?


# For loops

## Enumerate

## Range

## List comprehension

## Compare different functions

# While loops

- Perform a task `while` something is `True`
- Be careful:
    - Some loops never finish (get stuck)
    - Make sure that condition for ending the loop can be fullfilled

``` {.python}
while check_condition:
    perform_task()

```

## Errors and how to read them

There are useful resources regarding errors

- Simply googling works surprisingly well
- You will often end up on [stackoverflow](https://stackoverflow.com/)
    - There is no question which was not already asked^[if that is not true open up a question]

::: {.fragment}
![](/img/stackoverflow.png){width="500px" .absolute right=0}
:::

***

### Types of errors

***

### Fix errors