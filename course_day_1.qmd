---
title: "Introduction to Python"
author: "Verjinia Metodieva and Daniel Parthier"
date: 2025-01-21
format:
    revealjs:
        incremental: true 
        highlight-style: oblivion
        theme: night
        drop:
            engine: pyodide
        mermaid: 
          theme: dark
        margin: 0.01
        embed-resources: true
    pdf:
        mermaid: 
          theme: neutral
        highlight-style: github
execute:
    eval: true
    echo: true
ipynb-shell-interactivity: all
revealjs-plugins:
  - drop
---

# Why would you code?

Motivation

- Saving time
- Reproducible workflow
- Flexibility
- Unlimited creativity

<!--some high contrast colour choices : #DEC62F, #DE2F99, #2FD2DE,  #696969 (DimGrey), #6a9956 (comment green), #ce9178 (doc string red)-->

# Goal of today

<small>

```{.python}
# This script exports metadata information to a JSON file.
# The metadata includes the author, date, and the average resting
# membrane potential, units and the sweep count.
# The output is saved to 'data/data_info.json'.
import json
import numpy as np
path = 'data/'
resting_membrane = [-70.1, -73.3, -69.8, -68.5, -71.2]
resting_membrane_avg = np.mean(resting_membrane)
sweeps = [1, 2, 3, 4, 5]
voltage_unit = 'mV'
sweep_count = len(resting_membrane)
output_file = path + 'data_info.json'
output_data = {
    'author': 'Doe, John',
    'date': '2025-01-10',
    'resting_membrane_avg': resting_membrane_avg,
    'unit': voltage_unit,
    'sweep_count': sweep_count
}
with open(output_file, 'w') as f:
    json.dump(output_data, f)
```
</small>

::: {.notes}
_ _ _ _ _ _ _
This is an example to showcase what we will achieve today.
:::

# Basic usage

- Can be run from the terminal/console as well
    - Start python by typing `python`/`python3` into the console
    - You can quit by typing `quit()` into the console
- Most of the time with a GUI (graphical user interface)
- Sometimes code is run in document style (*Jupyter Notebook*)
- Run scripts

::: {.notes}
_ _ _ _ _ _ _
The console is mainly used for quick testing of commands you will use once and won't need to track. If you want to save your workflow or keep track of what you did, a script is required. In principle, a script is nothing else than a text file with a language-specific extension (.py). The code is saved in such a file and can be used by activating the script as a whole or running single code lines.
:::

## Visual Studio Code

- 1 of multiple options ([PyCharm](https://www.jetbrains.com/pycharm/), [Spyder](https://www.spyder-ide.org/))
- VS Code offers multifunctionality and integration of useful extensions (Git, Remote Explorer, Jupyter, GitHub Copilot)

::: {.fragment}
![](img/VSCode_script.png)
:::

::: {.notes}
_ _ _ _ _ _ _
A graphical user interface, like VS Code, provides code highlighting, formatting, and completion. At the same time, it gives a structured overview of a project. In the case of VS Code, you can use multiple languages by just adding the appropriate extension.
:::

## Visual Studio Code (Features)

- Multi-language support (*Python*, *R*, *Matlab*, *Julia*, *C++*, etc.)
- Set up your project (make environment, create files and folders)
- Provide visual notation (code highlighting)
- Auto-complete code snippets
- Show documentation of functions
- Find and fix errors in code (debugging)
- Synchronise code with GitHub
- And much more...

# Environments

::: {.absolute top=0 right=0}
![](img/empty_drawers.jpg){width="400px"}

<!-- <small>Photo by <a href="https://stockcake.com/i/organized-tool-drawer_1348100_881763">Stockcake</a></small> -->

:::

- Only bring the tools you need
    - Less bloated
    - Fewer conflicts
- Only project-specific packages

## Make environment

- Setting up an empty environment (get a drawer)

::: {.fragment .absolute bottom=0 right=0}
![](img/drawer_with_venv.jpg){width="400px"}
:::

- Can be done via terminal

::: {.fragment}
``` {.bash}
python -m venv .venv
```
:::

- Make one in VS Code
    - `CTRL + SHIFT + P` â†’ type: *env*
    - Select: *Create Environment*

::: {.notes}
The `python` command determines the version of python used to setup the virtual environment. You could also specify a different version of python by excplicitly writing it out (i.e. `python3.13`).
:::

## Start environment

**Windows**
``` {.bash}
.venv\Scripts\activate
```

**Unix/macOS**
``` {.bash}
source .venv/bin/activate
```
- VS Code will start the environment for you

## TO DO

On your own laptop:

1. Create an environment
2. activate it

- Then try the second way using VS Code directly.

::: {.notes}
Removing a vritual environment requires to remove the folder where it is saved.
:::

## Quit environment

``` {.bash}
deactivate
```

# Install packages

::: {.fragment .absolute top=-30 right=-30}
![](img/package_maangers.jpg){width="250px"}
:::

Package managers

- <span style="font-size: 30px;"> *What are they?* </span>
- <span style="font-size: 30px;"> pip (recommended) </span> \
<span style="color: #696969; font-size: 22px;">    conda-forge (if you really have to)</span>

::: {.fragment}
Usage
:::

::: {.fragment}
![](img/requirements.jpg){.absolute top=115 left=400 width="350"}
:::

::: {.fragment .absolute top=450 left=20}
``` {.bash}
pip install --upgrade pip
pip install -r requirements.txt
```
:::

::: {.fragment .absolute top=420 left=490}
<span style="color: #6a9956; font-size: 26px;">
# installing packages from \
requirements.txt file
</span>

:::

::: {.fragment .absolute top=570 left=20}
``` {.bash}
pip uninstall tensorflow       
pip install tensorflow==2.12
```
:::

::: {.fragment .absolute top=540 left=490}
<span style="color: #6a9956; font-size: 26px;">
# uninstalling a package \
# package with specified version
</span>

:::

::: {.notes}
_ _ _ _ _ _ _
- a package is a colection of functions
- package manager = a collection of tools that automates the process of installing, upgrading, configuring, and removing computer programs
- helps the user to easily and consistently work with packages - installing, updating, etc.
- provides some security, in the sense that packages that are provided by package managers are already checked for malfunctions
:::

## TO DO

- in the terminal
<br> 

::: {.fragment}
``` {.bash}
pip install --upgrade pip
pip install notebook
python -c "import notebook; print(notebook.__version__)"
```
:::

::: {.fragment}
7.3.2
:::
<br>

::: {.fragment}
``` {.bash}
pip install numpy
python -c "import numpy; print(numpy.__version__)"
```
:::

# Import

When do you have to import?

- Only some functions are available by default
- Other functions are available through external <span style="color:#DEC62F">packages</span>
- A package can have smaller 'packages' inside called <span style="color:#DE2F99">modules</span>


::: {.fragment}
```{mermaid}
%%| echo: false
%%| fig-width: 5

flowchart LR
    A[package] --> B(module) --> C((function))
    style A fill:#DEC62F,stroke:#000000,color:#000000
    style B fill:#DE2F99,stroke:#000000,color:#000000
```
:::

## Import packages 

::: {.fragment}
Let's open the 'numpy' drawer!
:::

::: {.fragment}
``` {python}
import numpy
```
:::

::: {.fragment}
This will open our nummpy *toolbox* drawer
:::

- Pull out a tool to use it with the dot notation: <span style="color:#DEC62F;font-family:monospace">toolbox</span><span style="color:#DE2F99;font-family:monospace">.</span><span style="color:#2FD2DE;font-family:monospace">tool</span>

::: {.fragment}
``` {python}
numpy.pi
```

``` {python}
numpy.sin(1)
```
:::

::: {.notes}
_ _ _ _ _ _ _
Importing a package only has to happen once. By using `import package` everything from the package will be made available.
:::

## Import (abbreviated)

- Some packages can have long names or you want an abbreviation (ie. `numpy` to `np`)
- Assign a new name during the import (`as`)

::: {.fragment}
``` {python}
#| eval: false
import numpy as np
```
:::

::: {.notes}
_ _ _ _ _ _ _
Generally abbreviating longer packages will make writing, but also reading code easier. At the same time you should check whether your abbreviation makes sense and is understandable for others. There are also common ways to abbreviate well known packages. Some other examples would be `numpy` as `np`, `pandas` as `pd`.
:::

## Import single functions

Load only parts of the package

- This could mean single functions or multiple functions/objects
- Avoid clutter and only import what you need

::: {.fragment}
``` {python }
#| eval: false
from numpy import sin, cos

sin(1)
cos(1)
```
:::

- Now everything after `import` is available

::: {.notes}
_ _ _ _ _ _ _
This way of import comes in handy if you just need a function or part of a large package. However, be careful with conflicting names which can arise from loading the function directly.
:::

## Word of advice

- Some packages use the same function names
- Avoid conflicts: reference package or use alias

::: {.fragment}
``` {python }
#| eval: false
import math
import numpy as np

math.sin(1)
np.sin(1)
```
:::

## Import modules

- Also a module as part of a package can be loaded using `.` or with `from`

::: {.fragment}
``` {python }
#| eval: false
from numpy import random
import matplotlib.pyplot as plt

random_number = random.normal(size=2)
plt.plot(random_number)
```
:::

# Programming building blocks

![](https://www.jaqueslondon.co.uk/cdn/shop/products/BuildingBlocks-WoodenStackingBlocksForKids-90219_1500x.jpg?v=1629795416){width="400px"}

<small>Photo by <a href="https://www.jaqueslondon.co.uk/products/wooden-building-blocks">JAQUES London</a></small>

::: {.notes}
Building blocks are small objects which can be changed, combined and used in many different ways to build something more complex. We always start with small blocks first. Such building blocks exist in all the programming languages. They might differ slightly but in principle will be very similar.
We can also think in the same way about tasks we want to solve. Most of the time we can make a big task into smaller tasks and a small task into even smaller blocks.
:::

## Variables

- Variables are objects we want to keep
- We assign them and can use them in the future

::: {.fragment}
``` {python}
#| code-line-numbers: false
cell_count = 1
```
:::

::: {.fragment}
``` {python}
#| code-line-numbers: false
print(cell_count)
```
:::

- Now `cell_count` will be `1` until changed or deleted
- We can assign anything we want

::: {.notes}
In this example `print()` will print the content of `cell_count` to the terminal.  
:::

- Be careful with naming variables

::: {.notes}
Variable names should be easy to read and contain information about the content. At the same time they should not be too long. Avoid using cryptic names and try to use standardised nomenclature when possible.
:::

***

### Assign multiple variables

- Multiple variables can be assigned at the same time

::: {.fragment}
``` {python}
#| code-line-numbers: false
cell_count, cell_density, cell_size = 1, 0.3, 4.1
```
:::

- Consider when this is useful (readability)
- It is equivalent to writing 3 lines of code

## Operators

![](https://img.freepik.com/free-photo/top-view-various-medical-equipment_23-2149283902.jpg){height="350px"}

Kind of like functions^[more on functions later] but different

- Have elements on both sides: `a operator b`

*** 

### Basic operators

1. `+` add two elements together
2. `-` subtract
3. `*` multiply
4. `**` power
5. `/` division, `//` integer^[whole numbers] division
6. `%` modulus


***

### Comparison operators

Let's compare things!

- Comparison operators will tell you if something is:
    - `True` or `False`^[`True` and `False` are referred to as boolean/bool]

1. `==` equal
2. `!=` not equal
3. `<` smaller and `>` larger
4. `<=` smaller or equal and `>=` larger or equal

***

### Logical operators

Logical operators check for conditions and returns `True` or `False`

1. `and` checks if both side are `True`

::: {style="font-size: 70%;"}
::: {.fragment}
``` {python}
#| eval: false
1==1 and 2==2
1==1 and 2>3

```
:::

::: {.fragment}
``` {python}
#| echo: false
1==1 and 2==2
1==1 and 2>3

```
:::
:::

2. `or` checks if at least one of the sides is `True`

::: {style="font-size: 70%;"}
::: {.fragment}
``` {python}
#| eval: false
1==1 or 2!=2
1==1 or 2==2
1<0 or 1>4

```
:::

::: {.fragment}
::: {.fragment}
``` {python}
#| echo: false
1==1 or 2!=2
1==1 or 2==2
1<0 or 1>4

```
:::
:::
:::



## (data-) types

::: {.fragment}
There are many...
:::

- But you only need to know a few
- They can do very different things and might have different properties

***

### Strings

- Strings are simply text
- Very important for loading files
    - Directory is a string
- Typically made with `'` or `"` as in `'text'` or `"text"`

::: {.fragment}
``` {python}
#| code-line-numbers: false
path = 'data/'
```
:::

***

### What to do with strings


::: {.fragment}
Combine:

``` {python}
#| code-line-numbers: false
path = 'data/'
path + 'data_info.json'
```
:::


::: {.fragment}
Split string into multiple strings:

``` {python}
#| code-line-numbers: false
output_file = path + 'data_info.json'
output_file.split('/')
```
:::

::: {.fragment .nonincremental}
You are curious about other things?

- Type the name of your string into the python console with a `.` and press `tab` twice
    - `output_file.`
:::

***

### Other things to do with strings

::: {style="font-size: 80%;"}

::: {.fragment .nonincremental}
- They have a length
    - Number of characters including spaces etc.

``` {python}
#| code-line-numbers: false
test_string = 'four'
len(test_string)
```
:::

- You can access parts of a string (indexing)

::: {.fragment}
``` {python}
#| code-line-numbers: false
test_string[1]
```
:::

::: {.fragment}
What did you expect?
:::

::: {style="font-size: 60%;"}
- In python we start counting positions from `0`
    - 0: `'f'`, 1: `'o'`, 2: `'u'`, 3: `'r'` 
:::

::: {.fragment}
What is your intuition for:

``` {python}
#| code-line-numbers: false
#| eval: false
test_string[-1]
```
:::

::: {.fragment}
``` {python}
#| code-line-numbers: false
#| echo: false
test_string[-1]
```
:::
:::

::: {.notes}
Strings, as you can see, are characters strung together to form a long chain of single elements. At the same time, you can still access and use single elements from your chain of characters. Should you want to access elements from the end of the chain, you can use negative indices and count backward.
:::

***

### How to break things^[strings] 101

Be careful how you write text or name folders

::: {.fragment fragment-index=1}
``` {python}
#| eval: false
#| code-line-numbers: false

folder = 'path/sub_path\'
```

``` {python}
#| echo: false
error_message = '''  File "<stdin>", line 1
    folder = 'path/sub_path\''
             ^
SyntaxError: unterminated string literal (detected at line 1)'''

print(error_message)
```
:::

::: {.nonincremental}
::: {.fragment fragment-index=2}
- Avoid [escape characters](https://python-reference.readthedocs.io/en/latest/docs/str/escapes.html )
:::
:::{.fragment fragment-index=3}
- Some functions cannot handle special characters
:::
:::

::: {.fragment fragment-index=3}
::: {.content-visible when-format="html"}
![](https://media1.tenor.com/m/GQuiLoHa6mYAAAAd/taron-egerton.gif){.absolute bottom=10 right=0 width="300"}
:::
:::

::: {.notes}
Having complicated folder structures or names with special characters can break you code or functions which want to access this directory. Keep in mind to avoid such characters which could lead to errors (`*`, `\`, `/`). For example when using a folder `data/subpath/` with a file inside called `strange/file/name.txt` python will assume that `strange` and `file` are directories where a file called `name.txt` exists. 
:::


***

### There are numbers and there are numbers

::: {style="font-size: 80%;"}

::: {.fragment .nonincremental}
- Whole numbers: Integers `int`

``` {python}
#| code-line-numbers: false
type(1)
```
:::

::: {.fragment .nonincremental}
- Real numbers: Floats `float`

``` {python}
#| code-line-numbers: false
type(1.0)
```
:::

::: {.fragment .nonincremental}
- Most of the time it might not matter^[In python]

``` {python}
#| code-line-numbers: false
1 == 1.0
```
:::

- Sometimes there is a difference and we will see later why

:::

::: {.notes}
Most of the time python handles the integer vs. float automatically. You will not have to worry about assigning. 
:::

***


### None

- A variable which exists but has no content can be `None`

::: {.fragment}
``` {python}
var_a = None
type(var_a)
```
:::

- Your program then knows that `var_a` exists
- You can change it later to another value

::: {.fragment}
``` {python}
var_a = 1
type(var_a)
```
:::

***

### Tuple

::: {style="font-size: 80%;"}
You can combine single elements into one

- Can be different types (`strings`, `Ã¬nt`, `float`, or other objects)
- Chain elements and combine them with `(` and `)`
- Tuples cannot be changed after creation ('immutable')

::: {.fragment}
``` {python}
resting_membrane = (-70.1, -73.3, -69.8, -68.5, -71.2)
```
:::

- Single elements can be accessed by their location

::: {.fragment}
``` {python}
resting_membrane[1]
```
:::

- Indexing start in python at 0^[more on indexing later]
:::

***

### Tuples cannot be changed

- You cannot modify elements inside the tuple or add any after creation

::: {.fragment}
``` {python}
#| eval: false
#| code-line-numbers: false

resting_membrane[1] = -72.2
```

``` {python}
#| echo: false
error_message = '''Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment'''

print(error_message)
```
:::

***

### Lists

:::: {.columns}
::: {.column width="30%"}
![](https://images.pexels.com/photos/4057737/pexels-photo-4057737.jpeg)
:::
::: {.column width="70%"}
- Multiple items in a list
- Similar to `tuple` but more powerful
- Lists can be changed after creation ('mutable')

::: {.fragment}
Let's list things!
:::
:::
::::

*** 

### Make lists

- Lists are made by using `[` and `]`
- Elements are inside

::: {.fragment}
``` {python}
author_list = ['Verjinia', 'Daniel']
author_list
```
:::

- Access elements inside a list^[remember we start counting at 0]

::: {.fragment}
```{python}
author_list[1]
author_list.index('Daniel')
```
:::

::: {.notes}
The crucial difference between `list`s and `tuple`s is that a `list` allows you to modify the results. Depending on how your code generates the output you might have to decide to take the `list`. If you want that the chain cannot be modified by your code (intended or by accident) a `tuple` is a safe option.
:::

***

### Features of lists

- Lists can do special things

::: {.fragment}
```{python}
author_list.sort()
author_list
```
:::

::: {.fragment}
```{python}
author_list.append('Dietmar')
author_list
```
:::

::: {.fragment}
```{python}
author_list.remove('Daniel')
author_list
```
:::

::: {.fragment}
```{python}
author_list[1] = 'Daniel'
author_list
```
:::


::: {.notes}
You can try to sort different lists with numbers and strings or even mixed lists. You will see that there is an order. Also try to use capitalised letters vs. small letters.   
:::

***

### Slicing

::: {style="font-size: 80%;"}
Sometimes you want to access multiple elements in a chain

- You can use `:` to access a slice between to indices

::: {.fragment}
``` {python}
resting_membrane = [-70.1, -73.3, -69.8, -68.5, -71.2]
resting_membrane[1:3]
```
:::

- Specify 'slice' properties `slice(start, stop, step)` 

::: {.fragment}
``` {python}
resting_membrane[slice(1,5,2)]
```
:::

- Alternative using `:stop:step` or `start::step`

::: {.fragment}
``` {python}
resting_membrane[:5:2]
resting_membrane[1::2]
```
:::
:::

::: {.notes}
Slicing is an important part of accessing data. This allows you to select a subset of the whole data set without going through all the elements separately and without copying the data. When using `:` or `::` without having an integer in front, Python will start at the 0 index. If you use a negative integer as a step, also referred to as stride, you will access items backwards.
:::


***

### Dictionary

You want to to have different things in different things and maybe add some things?

Hello `dictionary`!

- Very flexible
- Still very structured
- Easily accessible

***

### Make dictionary

::: {style="font-size: 80%;"}

- Made using `{` and `}`
- Contains key and values

::: {.fragment}
```{python}
new_dict = {
    "project": 'course',
    "date": '2025-01-21',
    "authors": author_list
}
new_dict
```
:::

::: {.fragment}
```{python}
new_dict["authors"]
new_dict["authors"].append('Dietmar')
new_dict
```
:::
:::

***

### Properties of dictionary

::: {style="font-size: 75%;"}

- List all the keys

::: {.fragment}
```{python}
new_dict.keys()
```
:::

- Get all values

::: {.fragment}
```{python}
new_dict.values()
```
:::

- Get all values from specific key

::: {.fragment}
```{python}
new_dict['authors']
new_dict.get('authors')
```
:::

- In case you need an output even if key does not exist use `.get`

::: {.fragment}
```{python}
new_dict.get('experimenter', 'unknown')
```
:::
:::

## Simple functions

::: {.fragment}
``` {python}
print('This function is boring')
```
:::

::: {.fragment} 
``` {python}
# combine variable types
var_a = 'a variable'
value_a = 42
print('more interesting when we include \n', var_a, 'with value', value_a)

print('the varaible type of var_a is', type(var_a))
print('the varaible type of value_a is', type(value_a))
```
:::

::: {.fragment}
``` {python}
# sort a list
animal_list = ['SNA 0254581', 'DSC 035576', 'SNA 0954581','SNA 0856662','DSC 024504']
sorted_animal_list = sorted(animal_list)

print(sorted_animal_list)
```
:::

:::{.notes}
_ _ _ _ _ _ _
- call a function
-  function
    - A named group of instructions that is executed when the functionâ€™s name is used in the code. 
    - may process input arguments and return a result back
    - logically grouping together pieces of code
- print() - display information on the screen
- type() - outputs the variable type
- can look up functions while typing code
:::

## Methods 

::: {.fragment}
``` {python}
# sort a list with a method
animal_list = ['SNA 0254581', 'DSC 035576', 'SNA 0954581','SNA 0856662','DSC 024504']

# using the function sorted()
sorted_animal_list = sorted(animal_list)

# same thing but using a method .sort()
animal_list.sort() # sorting in ascending order
print(animal_list)

animal_list.sort(reverse = True) # sorting in descending order
print(animal_list)

num_animals = len(animal_list)
print("I've analyzed the data of", num_animals, "animals.")
```

:::

:::{.notes}
_ _ _ _ _ _ _
- methods
    - .sort()
- Function â€” a set of instructions that perform a task
- Method â€” a set of instructions that are associated with an object.
- method is called with an object and has the possibility to modify data of an object.
- can define your own functions --> live coding example
:::


## Define your own functinos 

::: {.fragment}
::: {.absolute top=10 left=-180 style="transform: scale(0.7);"}
![](img/function_explained.jpg)
:::
:::

<small>

::: {.fragment}
::: {.absolute top=290 left=-80}

``` {.python}
import json
import numpy as np

path = 'data/'
resting_membrane = [-70.1, -73.3, -69.8, -68.5, -71.2]

resting_membrane_avg = np.mean(resting_membrane)
sweeps = [1, 2, 3, 4, 5]
voltage_unit = 'mV'
sweep_count = len(resting_membrane)

output_file = path + 'data_info.json'


output_data = {
    'author': 'Doe, John',
    'date': '2025-01-10',
    'resting_membrane_avg': resting_membrane_avg,
    'unit': voltage_unit,
    'sweep_count': sweep_count
}

with open(output_file, 'w') as f:
    json.dump(output_data, f)
```
:::
:::


:::{.fragment}
::: {.absolute top=100 right=70} 
``` {.python}
import json
import numpy as np

def create_meta_data_json(patcher, date_of_rec, RMPs, save_path, save_filename):
  avg_RMP = np.mean(RMPs)
  num_sweeps = len(RMPs)

  output_data = {
    'author': patcher,
    'date': date_of_rec,
    'resting_membrane_avg': avg_RMP,
    'unit': 'mV',
    'sweep_count': num_sweeps
  }

  print('saving the file ', save_filename, 'in', save_path)
  with open(save_path + save_filename, 'w') as f:
    json.dump(output_data, f)
  
  return output_data

```
:::
:::
<br>

:::{.fragment}
::: {.absolute top=430 right=-80}

``` {.python}
patcher = 'Verji'
date_of_rec = '2025-01-15'
save_path = 'data/'
save_fn  = 'verji_s_first_recording.json'
resting_membrane = [-70.1, -73.3, -69.8, -68.5, -71.2]

# ways to call the function
create_meta_data_json(patcher = 'Verji', date_of_rec = date_of_rec , RMPs = resting_membrane, \
                                 save_path = save_path, save_filename = save_fn)

out_data = create_meta_data_json(patcher, date_of_rec, resting_membrane, save_path, save_fn)

out_data = create_meta_data_json('Verji', '2025-01-15', [-70.1, -73.3, -69.8, -68.5, -71.2], 'data/', \
                                 'verji_s_first_recording.json')

```
:::
:::

</small>

::: {.notes}
_ _ _ _ _ _ _
- The function definition opens with the keyword *def* followed by the name of the function (convert_miliseconds_to_minutes) and a parenthesized list of parameter names (ms). The body of the function â€” the statements that are executed when it runs â€” is indented below the definition line. The body concludes with a **return** keyword followed by the return value.
    - can set default parameters in a function. this means that a function will work with those parameters, if one doensn't pass other ones
- when passing parameters to a function, it's important that one passes them in the correct order
-	local variables
    - variables that live only inside of functions, minutes in our example
    - they no longer exist once the function is done executing ïƒ  show it by running minutes
    - If we try to access their values outside of the function, we will encounter an error
- global variables
    - variables defined outside any function
:::

## Documentation

::: {.fragment}
### <span style="color: #6a9956;"> # comments describe the code </span>

- audience - you <span style="font-size: 22px;"> or other developers </span>
- functionality
- 'why?'

:::
 
::: {.fragment}
### <span style="color: #ce9178;">'''docstrings give explanations'''</span>
:::
- how to use?
- for single functions, modules, scripts
- accessed through *help()* 

::: {.fragment}
### README.md
- project documentation
:::

::: {.notes}
_ _ _ _ _ _ _
- commenting
    - use #
    - when something is not intuitive or has to be paid attention to
- docstrings
    - ''' '''
    - from single functions, to modules, to whole scripts
    - different formal formats. see resources.docx for complete overview
    documenting projects
    - appear (if existing) when you wigle the mouse above a function either in VSC or in jupyter notebook
- readme files
    - prupose of the project, use case example
:::

## Documentation example <small>

::: {.fragment}
::: {.absolute top=130 left=105}
::: {style="font-size: 78%;"}

``` {.python}
import json
import numpy as np

def create_meta_data_json(patcher, date_of_rec, RMPs, save_path, save_filename):
    '''
    Returns and saves a dictionary with metadata.

    Args:       patcher (str): name of experimenter
                date_of_rec (str): date of experiment
                RMPs (list): list of recorded resting membrane potentials
                save_path (str): destination folder
                save_filename (str): name of the file

    Returns:    output_data (dictionary): containing the metadata
    '''
  avg_RMP = np.mean(RMPs)
  num_sweeps = len(RMPs) # have as many sweeps as values
  
  # define metadata dictionary
  output_data = {
    'author': patcher,
    'date': date_of_rec,
    'resting_membrane_avg': avg_RMP,
    'unit': 'mV', # always mV for RMP
    'sweep_count': num_sweeps
    }

  # confirmation to user
  print('saving the file ', save_filename, 'in', save_path)

  with open(save_path + save_filename, 'w') as f:
    json.dump(output_data, f)
  return output_data

resting_membrane = [-70.1, -73.3, -69.8, -68.5, -71.2]
# create a out_dict containing the metadata
out_dict = create_meta_data_json('Verji', '2025-01-15', resting_membrane, 'data/', 'verji_s_first_recording.json')
```
:::
:::
:::

</small>

# Homework


::: {.notes}
_ _ _ _ _ _ _
- explaining how to use jupyter notebooks for the homework
- important to mention that the correct environment (kernel) needs to appear in the top right
:::
