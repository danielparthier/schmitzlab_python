---
title: "Introduction to Python"
author: "Verjinia Metodieva and Daniel Parthier"
date: 2025-01-21
format:
    revealjs:
        incremental: true 
        theme: night
        drop:
            shortcut: ","
            engine: pyodide
    pdf: default
execute:
    eval: true
    echo: true
revealjs-plugins:
  - drop
---

<!--some high contrast colour choices : #DEC62F, #DE2F99, #2FD2DE-->
# Why would you code?

Motivation

- Saving time
- Reproducible workflow
- Flexibility
- Unlimited creativity

# Goal of today

```{.python}
# This script exports metadata information to a JSON file.
# The metadata includes the author, date, and length of the data.
# The output is saved to 'data/data_info.json'.
import json
cell_count = [1,1,4,5,2]
cell_count.sort()
list_length = len(cell_count)
output_file = 'data/data_info.json'
output_data = {
    'author': 'Doe, John',
    'date': '2025-01-10',
    'length': list_length
}
with open(output_file, 'w') as f:
    json.dump(output_data, f)
```

::: {.notes}
This is an example to showcase what we will achieve today.
:::

# Basic usage

- Can be run from the terminal/console as well
    - Start python by typing `python`/`python3` into the console
    - You can quit by typing `quit()` into the console
- Most of the time with a GUI (graphical user interface)
- Run scripts

::: {.notes}
The console is mainly used for quick testing of commands commands you will use once and won't need to track. If you want to save your workflow or keep track of what you did a script is required. In principle, a script is nothing else than a text file with a language specific extension (.py). The code is saved in such a file a can be used by activating the script as a whole or run single code lines. 
:::

# Visual Code Studio

- 1 of multiple options ([PyCharm](https://www.jetbrains.com/pycharm/), [Spyder](https://www.spyder-ide.org/))
- VS Code offers multifunctionality and integration of useful extensions (Git, Remote Explorer, Jupyter, GitHub Copilot)
![](img/VSCode_script.png)

::: {.notes}
A graphical user inteface, as VS Code, provides code highlighting, formatting and completion. At the same time it give a structured overview of a project. In the case of VS Code you can use multiple languages by just adding the appropiate extension.
:::

# Environments

::: {.absolute top=0 right=0}
![](https://images.stockcake.com/public/c/2/a/c2a89e7f-1460-40a8-9c2a-5b809111d0cd_large/organized-tool-drawer-stockcake.jpg){width="200px"}
<br>
<small>Photo by <a href="https://stockcake.com/i/organized-tool-drawer_1348100_881763">Stockcake</a></small>
:::

- Only bring the tools you need
    - Less bloated
    - Few conflicts
- Only project specific packages

## Make environment

- Setting up an empty environment (get a drawer)
- Can be done via console

::: {.fragment}
``` {.bash}
python -m venv .venv
```
:::

- Make one in VS Code
    - `CTRL + SHIFT + P` â†’ type: *env*
    - Select: *Create Environment*


## Start environment

**Windows**
``` {.bash}
.venv\Scripts\activate
```

**Unix/macOS**
``` {.bash}
source .venv/bin/activate
```
- VS Code will start the environment for you

## Quit environment

``` {.bash}
deactivate
```

# Install packages

# Import

When do you have to import?

- Only some functions are available by default

::: {.fragment}
Let's open the 'math' drawer!
:::

::: {.fragment}
``` {python}
import math
```
:::

::: {.fragment}
This will open our math *toolbox* drawer
:::

- Pull out a tool to use it with the dot notation: <span style="color:#DEC62F;font-family:monospace">toolbox</span><span style="color:#DE2F99;font-family:monospace">.</span><span style="color:#2FD2DE;font-family:monospace">tool</span>

::: {.fragment}
``` {python}
math.pi
```

``` {python}
math.sin(1)
```
:::

::: {.notes}
Importing a package only has to happen once. By using `import package` everything from the package will be made available.
:::

## Packages

## Modules

# Programming building blocks

## Variables

## (data-) types

## Simple functions

## Methods

# Documentation

# Homework