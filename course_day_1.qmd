---
title: "Introduction to Python"
author: "Verjinia Metodieva and Daniel Parthier"
date: 2025-01-21
format:
    revealjs:
        incremental: true 
        highlight-style: dracula
        theme: night
        drop:
            engine: pyodide
        mermaid: 
          theme: dark
    pdf:
        mermaid: 
          theme: neutral
        highlight-style: github
execute:
    eval: true
    echo: true
revealjs-plugins:
  - drop
---

<!--some high contrast colour choices : #DEC62F, #DE2F99, #2FD2DE,  #696969 (DimGrey), #6a9956 (comment green), #ce9178 (doc string red)-->
# Why would you code?

Motivation

- Saving time
- Reproducible workflow
- Flexibility
- Unlimited creativity

# Goal of today

```{.python}
# This script exports metadata information to a JSON file.
# The metadata includes the author, date, and length of the data.
# The output is saved to 'data/data_info.json'.
import json
import numpy as np
path = 'data/'
resting_membrane = [-70.1,-73.3,-69.8,-68.5,-71.2]
resting_membrane_avg = np.mean(resting_membrane)
sweeps = [1,2,3,4,5]
voltage_unit = 'mV'
sweep_count = len(resting_membrane)
output_file = path + 'data_info.json'
output_data = {
    'author': 'Doe, John',
    'date': '2025-01-10',
    'resting_membrane_avg': resting_membrane_avg,
    'unit': voltage_unit,
    'sweep_count': sweep_count
}
with open(output_file, 'w') as f:
    json.dump(output_data, f)
```

::: {.notes}
_ _ _ _ _ _ _
This is an example to showcase what we will achieve today.
:::

# Basic usage

- Can be run from the terminal/console as well
    - Start python by typing `python`/`python3` into the console
    - You can quit by typing `quit()` into the console
- Most of the time with a GUI (graphical user interface)
- Sometimes code is run in document style (*Jupyter Notebook*)
- Run scripts

::: {.notes}
_ _ _ _ _ _ _
The console is mainly used for quick testing of commands you will use once and won't need to track. If you want to save your workflow or keep track of what you did, a script is required. In principle, a script is nothing else than a text file with a language-specific extension (.py). The code is saved in such a file and can be used by activating the script as a whole or running single code lines.
:::

## Visual Studio Code

- 1 of multiple options ([PyCharm](https://www.jetbrains.com/pycharm/), [Spyder](https://www.spyder-ide.org/))
- VS Code offers multifunctionality and integration of useful extensions (Git, Remote Explorer, Jupyter, GitHub Copilot)

![](img/VSCode_script.png)

::: {.notes}
_ _ _ _ _ _ _
A graphical user interface, like VS Code, provides code highlighting, formatting, and completion. At the same time, it gives a structured overview of a project. In the case of VS Code, you can use multiple languages by just adding the appropriate extension.
:::

## Visual Studio Code (Features)

- Multi-language support (*Python*, *R*, *Matlab*, *Julia*, *C++*, etc.)
- Set up your project (make environment, create files and folders)
- Provide visual notation (code highlighting)
- Auto-complete code snippets
- Show documentation of functions
- Find and fix errors in code (debugging)
- Synchronise code with GitHub
- And much more...

# Environments

::: {.absolute top=0 right=0}
![](https://images.stockcake.com/public/c/2/a/c2a89e7f-1460-40a8-9c2a-5b809111d0cd_large/organized-tool-drawer-stockcake.jpg){width="200px"}

<small>Photo by <a href="https://stockcake.com/i/organized-tool-drawer_1348100_881763">Stockcake</a></small>

:::

- Only bring the tools you need
    - Less bloated
    - Fewer conflicts
- Only project-specific packages

## Make environment

- Setting up an empty environment (get a drawer)
- Can be done via terminal

::: {.fragment}
``` {.bash}
python -m venv .venv
```
:::

- Make one in VS Code
    - `CTRL + SHIFT + P` → type: *env*
    - Select: *Create Environment*


## Start environment

**Windows**
``` {.bash}
.venv\Scripts\activate
```

**Unix/macOS**
``` {.bash}
source .venv/bin/activate
```
- VS Code will start the environment for you

## Quit environment

``` {.bash}
deactivate
```

# Install packages

Package managers

- <span style="font-size: 30px;"> *What are they?*
- <span style="font-size: 30px;"> pip (recommended) \
<span style="color: #696969; font-size: 22px;">    conda-forge (if you really have to)</span>

::: {.fragment .appear-disappear}
Usage

<!-- ![](img/miniML.jpg){.absolute top=130 right=10 width="630"} -->
:::

::: {.fragment}
![](img/requirements.jpg){.absolute top=130 right=-20 width="550"}
:::

::: {.fragment}
<div style="position: absolute; top: 500px; left: 55px;">
``` {.bash}
pip install --upgrade pip
pip install -r requirements.txt
```
</div>

<span style="position: absolute; top: 500px; left: 610px; color: #6a9956; font-size: 26px;">
# installing packages from \
requirements.txt file
</span>

:::

::: {.fragment}
<div style="position: absolute; top: 610px; left: 55px;">
``` {.bash}
pip uninstall tensorflow       
pip install tensorflow==2.12
```
</div>

<span style="position: absolute; top: 610px; left: 610px; color: #6a9956; font-size: 26px;">
# uninstalling a package \
# package with specified version
</span>

:::

::: {.notes}
_ _ _ _ _ _ _
- a package is a colection of functions
- package maanger = a collection of tools that automates the process of installing, upgrading, configuring, and removing computer programs
- helps the user to easily and consistently work with packages - installing, updating, etc.
- provides some security, in the sense that packages that are provided by package managers are already checked for malfunctions
:::

# Import

When do you have to import?

- Only some functions are available by default
- Other functions are available through external <span style="color:#DEC62F">packages</span>
- A package can have smaller 'packages' inside called <span style="color:#DE2F99">modules</span>


::: {.fragment}
```{mermaid}
%%| echo: false
%%| fig-width: 5

flowchart LR
  A[package] --> B(module) --> C((function))
```
:::

## Import packages 

::: {.fragment}
Let's open the 'math' drawer!
:::

::: {.fragment}
``` {python}
import numpy
```
:::

::: {.fragment}
This will open our math *toolbox* drawer
:::

- Pull out a tool to use it with the dot notation: <span style="color:#DEC62F;font-family:monospace">toolbox</span><span style="color:#DE2F99;font-family:monospace">.</span><span style="color:#2FD2DE;font-family:monospace">tool</span>

::: {.fragment}
``` {python}
numpy.pi
```

``` {python}
numpy.sin(1)
```
:::

::: {.notes}
_ _ _ _ _ _ _
Importing a package only has to happen once. By using `import package` everything from the package will be made available.
:::

## Import (abbreviated)

- Some packages can have long names or you want an abbreviation (ie. `numpy` to `np`)
- Assign a new name during the import (`as`)

::: {.fragment}
``` {python}
#| eval: false
import numpy as np
```
:::

::: {.notes}
_ _ _ _ _ _ _
Generally abbreviating longer packages will make writing, but also reading code easier. At the same time you should check whether your abbreviation makes sense and is understandable for others. There are also common ways to abbreviate well known packages. Some other examples would be `numpy` as `np`, `pandas` as `pd`.
:::

## Import single functions

Load only parts of the package

- This could mean single functions or multiple functions/objects
- Avoid clutter and only import what you need

::: {.fragment}
``` {python }
#| eval: false
from numpy import sin, cos

sin(1)
cos(1)
```
:::

- Now everything after `import` is available

::: {.notes}
_ _ _ _ _ _ _
This way of import comes in handy if you just need a function or part of a large package. However, be careful with conflicting names which can arise from loading the function directly.
:::

## Word of advice

- Some packages use the same function names
- Avoid conflicts: reference package or use alias

::: {.fragment}
``` {python }
#| eval: false
import math
import numpy as np

math.sin(1)
np.sin(1)
```
:::

## Import modules

- Also a module as part of a package can be loaded using `.` or with `from`

::: {.fragment}
``` {python }
#| eval: false
from numpy import random
import matplotlib.pyplot as plt

random_number = random.normal(size=2)
plt.plot(random_number)
```
:::

# Programming building blocks

## Variables

## (data-) types

## Simple functions

::: {.fragment}
``` {python}
print('This function is boring')
```
:::

::: {.fragment .fade-in-then-out}
``` {python}
var_a = 'a variable'
value_a = 42
print('more interesting when we include \n', var_a, 'with value', value_a)

print(type(var_a))
print(type(value_a))
```
:::

::: {.fragment .fade-in-then-out}
``` {python}
print('more interesting when we include \n', var_a, 'with value', value_a)
```
:::





:::{.notes}
_ _ _ _ _ _ _
- call a function
-  function
    - A named group of instructions that is executed when the function’s name is used in the code. 
    - may process input arguments and return a result back
    - logically grouping together pieces of code

- print - display information on the screen
:::

## Methods

## Documentation

### <span style="color: #6a9956; position: relative; left:-110px;"> # comments describe the code </span>

- audience - you <span style="font-size: 22px;"> or other developers </span>
- describing functionality
- 'why?'
 
::: {.fragment}
### <span style="color: #ce9178; position: relative; left:-110px;">'''docstrings give explanations'''</span>
:::
- explanation how to use
- for single functions, modules, scripts

::: {.fragment}

::: {.absolute top=100 right=-100 }
::: {.small}

<!-- <div style="position: absolute; top: 100px; right:-100px; font-size: 28px; overflow-wrap: break-word; word-wrap: break-word;"> -->

``` {.python}
import json

cell_count = [1,1,4,5,2]
cell_count.sort()
list_length = len(cell_count)
output_file = 'data/data_info.json'
output_data = {
    'author': 'Doe, John',
    'date': '2025-01-10',
    'length': list_length
}
with open(output_file, 'w') as f:
    json.dump(output_data, f)
```
:::
:::
<!-- </div> -->

:::

::: {.fragment}
### <span style="position: relative; left:-110px;">README</span>
:::

::: {.notes}
commenting
- use #
- when something is not intuitive or has to be paid attention to
docstrings
- ''' '''
- from single functions, to modules, to whole scripts
- different formal formats. see resources.docx for complete overview
documenting projects
- readme files: prupose of the project, use case example
:::

# Homework